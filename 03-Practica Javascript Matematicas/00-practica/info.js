// Nombres claves

// console.group('encapsulado') / console.groupEnd('encapsulado')

// Math.sqrt ğŸ‘‰ 
//Es la funciÃ³n que retorna la raÃ­z cuadrada de un nÃºmero

// array.prototype.find() ğŸ‘‰ 
/* Al igual que los mÃ©todos forEach, map y filter, el mÃ©todo find en JavaScript
es una funciÃ³n que nos permite manipular los elementos de un array. Piensa en estos mÃ©todos 
como si fueran una caja con un hueco de entrada y uno de salida. Nosotros introducimos en 
la caja un array o listado de elementos. */

// array.prototype.map() ğŸ‘‰
/* Es un mÃ©todo incorporado en los arreglos, para iterar a travÃ©s de los elementos dentro de una 
colecciÃ³n de arreglos en JavaScript. Piensa en Ã©l, como un bucle para avanzar de un elemento a 
otro en una lista, manteniendo el orden y la posiciÃ³n de cada elemento. */

// array.prototype.reduce() ğŸ‘‰ 
/* El mÃ©todo de reducciÃ³n (reduce) en realidad tiene un nombre bastante explicativo, 
ya que todo lo que hace es tomar un array de elementos y reducirlo a un solo valor. 
Este valor puede ser cualquier cosa, como un nÃºmero, un objeto o una cadena (string). */

// array.prototype.slice() ğŸ‘‰ 
/* El mÃ©todo slice() devuelve una copia de una parte del array dentro de un nuevo array 
empezando por inicio hasta fin (fin no incluido). El array original no se modificarÃ¡. */

const numeros = [3, 4, 32, 43, 653];
const sliceNumber = numeros.slice(0, 2)
console.log(sliceNumber);

const spliceNumber = numeros.splice(0, 2)
console.log(spliceNumber);



